#%RAML 1.0
title: Board Games Results API
baseUri: http://boardgamesresults.herokuapp.com/api/{version}
version: v1
mediaType:  application/json
protocols: [ HTTP ]

# Declare schemas and types of data
types:
  tables:
    type: table[]
    description: This is list of tables.
    uniqueItems: true
  table:
    type: object
    description: Single table entity.
    properties:
      _id?: string
      created_at?:
        type: datetime
        example: 2016-02-28T16:41:41.090Z
      updated_at?:
        type: datetime
        example: 2016-02-28T16:41:41.090Z
      description?: string
      game: Game
  Game:
    type: object
    description: Information about game and its situation.
    properties:
      players: Player[]
      title?: string
  Player:
    type: object
    description: Person who played a game.
    properties:
      nickname: string
      situation: Situation
      city: City
  Situation:
    type: object
    description: Specific set of state at the end of the game to store.
    properties:
      military: number
      gold: number
      wonder: number
      culture: number
      trade: number
      guild: number
      science: number
  City:
    type: object
    properties:
      name: string
      side: string
  Response:
    type: object
    properties:
      success: boolean
      status: number
      message?: string
      data?: object

# Define types of common resources
resourceTypes:
  # Multiple items
  collection:
    usage: This resourceType should be used for any collection of items
    description: Collection of available <<resource>> in database
    get:
      description: Get a list of <<resourcePathName>>.
      responses:
        200:
          body:
            application/json:
              type: tables
              example: <<exampleCollection>>
    post:
      description: |
        Add a new <<resourcePathName|!singularize>> to database.
      queryParameters:
        access_token:
          description: "The JWT access token provided by the authentication application"
          example: xxxxx.yyyyy.zzzzz
          required: true
          type: string
      body:
        application/json:
          type: <<resourcePathName|!singularize>>
          example: <<exampleBodyItem>>
      responses:
        200:
          body:
            application/json:
              type: Response
              example: |
                {
                  "message": "The <<resourcePathName|!singularize>> has been added",
                  "success": true,
                  "status": 200
                }
  # Single item
  collection-item:
      description: Entity representing a <<resourcePathName|!singularize>>
      get:
        description: |
          Get the <<resourcePathName|!singularize>>
          with <<resourcePathName|!singularize>>Id =
          {<<resourcePathName|!singularize>>Id}
        responses:
          200:
            body:
              application/json:
                type: Response
                example: <<exampleItem>>
          404:
            body:
              application/json:
                example: |
                  {
                    "message": "<<resourcePathName|!singularize>> not found in collection",
                    "success": false,
                    "status": 404
                  }
      put:
        description: |
          Update {<<resourcePathName|!singularize>>Id} info with new data
        queryParameters:
          access_token:
            displayName: Access Token
            type: string
            description: Token giving you permission to make call
            example: xxxxx.yyyyy.zzzzz
            required: true
        body:
          application/json:
            type: <<resourcePathName|!singularize>>
            example: <<exampleBodyItem>>
        responses:
          204:
            body:
              application/json:
                type: Response
                example: |
                  {
                    "message": "The <<resourcePathName|!singularize>> has been changed",
                    "success": true,
                    "status": 200
                  }
          404:
            body:
              application/json:
                type: Response
                example: |
                  {
                    "message": "<<resourcePathName|!singularize>> not found",
                    "success": false,
                    "status": 404
                  }
      delete:
        description: |
          Delete {{<<resourcePathName|!singularize>>Id}
          from database completely. Cannot be undone
        queryParameters:
          access_token:
            displayName: Access Token
            type: string
            description: Token giving you permission to make call
            example: xxxxx.yyyyy.zzzzz
            required: true
        responses:
          204:
            body:
              application/json:
                example: |
                  {
                    "message": "The <<resourcePathName|!singularize>> has been deleted",
                    "success": true,
                    "status": 200
                  }
          404:
            body:
              application/json:
                example: |
                  {
                    "message": "<<resourcePathName|!singularize>> not found",
                    "success": false,
                    "status": 404
                  }
# Traits of resources
traits:
  secured:
    usage: Apply this to any method that needs to be secured
    description: Some requests require authentication with JWT.
    headers:
      access_token:
        description: Token giving you permission to make call
        example: xxxxx.yyyyy.zzzzz
        required: true
  pageable:
    queryParameters:
      offset:
        description: Skip over a number of elements by specifying an offset value for the query
        type: integer
        required: false
        example: 20
        default: 0
      limit:
        description: Limit the number of elements on the response
        type: integer
        required: false
        example: 160
        default: 100

# Define resources
/tables:
  description: Collection of games played. Reffered to as "tables"
  type:
    collection:
      exampleCollection: !include tables-get-collection.example.json
      exampleBodyItem: !include tables-post-item.example.json
  get:
    is: [ pageable ]
    description: |
      Get a full list of tables.
      Can be filtered with created_at or author.
    queryParameters:
      author:
        displayName: Author
        type: string
        description: Creator's nickname
        example: "solar"
        minLength: 3
        maxLength: 70
        required: false
      created_at:
        type: datetime
        description: ISO Time when table was added
        example: 2016-06-12T21:04:32.304Z
        required: false

  post:
    is: [ secured ]
    description: Create new table
  /{tableId}:
    description: Single game table
    type:
      collection-item:
        exampleItem: !include tables-tableId-get-item.example.json
        exampleBodyItem: !include tables-tableId-put-item.example.json
    put:
      is: [ secured ]
    delete:
      is: [ secured ]
